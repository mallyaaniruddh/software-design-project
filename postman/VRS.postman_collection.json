{
	"info": {
		"_postman_id": "61ee89a3-7c48-4f1a-bbf8-4c9a986120cf",
		"name": "VRS",
		"description": "Postman collection for VRS application",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25870780"
	},
	"item": [
		{
			"name": "Vehicle",
			"item": [
				{
					"name": "GET vehicles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(vehicle) {",
									"        pm.expect(vehicle).to.have.property('name');",
									"        pm.expect(vehicle).to.have.property('brandOwner');",
									"        pm.expect(vehicle).to.have.property('releaseYear');",
									"        pm.expect(vehicle).to.have.property('color');",
									"        pm.expect(vehicle).to.have.property('fuelType');",
									"        pm.expect(vehicle).to.have.property('numberOfDoors');",
									"        pm.expect(vehicle).to.have.property('trunkCapacity');",
									"        pm.expect(vehicle).to.have.property('rentingCost');",
									"        pm.expect(vehicle).to.have.property('state');",
									"        pm.expect(vehicle).to.have.property('id');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Fuel cost is a non-negative number\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  responseData.forEach(function(vehicle) {",
									"    pm.expect(vehicle.fuelType.cost).to.be.a('number').and.to.be.at.least(0);",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Fuel type object is present in the response\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(vehicle) {",
									"        pm.expect(vehicle.fuelType).to.exist;",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Name, brandOwner, color, and state are non-empty strings\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    ",
									"    responseData.forEach(function(vehicle) {",
									"        pm.expect(vehicle.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"        pm.expect(vehicle.brandOwner).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Brand owner should not be empty\");",
									"        pm.expect(vehicle.color).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Color should not be empty\");",
									"        pm.expect(vehicle.state).to.be.a('string').and.to.have.lengthOf.at.leLeast(1, \"State should not be empty\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/vehicles",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"vehicles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Vehicle by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('name');",
									"    pm.expect(responseData).to.have.property('brandOwner');",
									"    pm.expect(responseData).to.have.property('releaseYear');",
									"    pm.expect(responseData).to.have.property('color');",
									"    pm.expect(responseData).to.have.property('fuelType');",
									"    pm.expect(responseData).to.have.property('numberOfDoors');",
									"    pm.expect(responseData).to.have.property('trunkCapacity');",
									"    pm.expect(responseData).to.have.property('rentingCost');",
									"    pm.expect(responseData).to.have.property('state');",
									"    pm.expect(responseData).to.have.property('id');",
									"});",
									"",
									"",
									"pm.test(\"FuelType object contains a valid cost field\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.fuelType).to.exist.and.to.be.an('object');",
									"    pm.expect(responseData.fuelType.cost).to.exist.and.to.be.a('number');",
									"});",
									"",
									"",
									"pm.test(\"Release year is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.releaseYear).to.be.a('number');",
									"    pm.expect(responseData.releaseYear).to.be.at.least(0);",
									"});",
									"",
									"pm.test(\"Number of doors is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.numberOfDoors).to.be.a('number');",
									"    pm.expect(responseData.numberOfDoors).to.be.at.least(0);",
									"});",
									"",
									"pm.test(\"Trunk capacity is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.trunkCapacity).to.be.a('number');",
									"    pm.expect(responseData.trunkCapacity).to.be.at.least(0);",
									"});",
									"",
									"pm.test(\"Renting cost is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.rentingCost).to.be.a('number');",
									"    pm.expect(responseData.rentingCost).to.be.at.least(0);",
									"});",
									"",
									"",
									"pm.test(\"Name, brandOwner, color, and state are non-empty strings\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    ",
									"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should be a non-empty string\");",
									"    pm.expect(responseData.brandOwner).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Brand owner should be a non-empty string\");",
									"    pm.expect(responseData.color).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Color should be a non-empty string\");",
									"    pm.expect(responseData.state).to.be.a('string').and.to.have.lengthOf.at.least(1, \"State should be a non-empty string\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/vehicles/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"vehicles",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete by id",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/vehicles/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"vehicles",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add vehicle",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"car\",\n    \"ID\": 1,\n    \"name\": \"Tesla Model 3\",\n    \"brandOwner\": \"Tesla\",\n    \"releaseYear\": 2023,\n    \"cost\": 50000.0,\n    \"color\": \"RED\",\n    \"fuelType\": {\n        \"type\": \"electric\"    },\n    \"vehicleState\": \"AVAILABLE\",\n    \"numberOfDoors\": 4,\n    \"trunkCapacity\": 400.0\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/vehicles",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"vehicles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update by id",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"car\",\n    \"ID\": 1,\n    \"name\": \"Tesla Model Y\",\n    \"brandOwner\": \"Tesla\",\n    \"releaseYear\": 2023,\n    \"cost\": 50000.0,\n    \"color\": \"RED\",\n    \"fuelType\": {\n        \"type\": \"electric\"    },\n    \"vehicleState\": \"AVAILABLE\",\n    \"numberOfDoors\": 4,\n    \"trunkCapacity\": 400.0\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/vehicles/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"vehicles",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Booking",
			"item": [
				{
					"name": "Make booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Get the raw response text",
									"var rawResponse = pm.response.text();",
									"",
									"// Remove quotes from the response",
									"var sanitizedResponse = rawResponse.replace(/^\"|\"$/g, '');",
									"",
									"// Store the sanitized response as an environment variable",
									"pm.environment.set(\"bookingId\", sanitizedResponse);",
									"",
									"// Debugging output",
									"console.log(\"Stored bookingId:\", sanitizedResponse);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/renting/make_booking/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"renting",
								"make_booking",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Customize booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\"GPS\"",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/renting/customize_booking/{{bookingId}}\n",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"renting",
								"customize_booking",
								"{{bookingId}}\n"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authenticate Payment",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/renting/authenticate_payment//{{bookingId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"renting",
								"authenticate_payment",
								"",
								"{{bookingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Return and Open Gate",
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/renting/return_vehicle_and_open_gate//{{bookingId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"renting",
								"return_vehicle_and_open_gate",
								"",
								"{{bookingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Return Vehicle",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/renting/return_vehicle/{{bookingId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"renting",
								"return_vehicle",
								"{{bookingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cancel booking",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/renting/cancel_booking/{{bookingId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"renting",
								"cancel_booking",
								"{{bookingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET bookings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('array');",
									"",
									"    responseData.forEach(function(vehicle) {",
									"        pm.expect(vehicle).to.have.property('name');",
									"        pm.expect(vehicle).to.have.property('brandOwner');",
									"        pm.expect(vehicle).to.have.property('releaseYear');",
									"        pm.expect(vehicle).to.have.property('color');",
									"        pm.expect(vehicle).to.have.property('fuelType');",
									"        pm.expect(vehicle).to.have.property('numberOfDoors');",
									"        pm.expect(vehicle).to.have.property('trunkCapacity');",
									"        pm.expect(vehicle).to.have.property('rentingCost');",
									"        pm.expect(vehicle).to.have.property('state');",
									"        pm.expect(vehicle).to.have.property('id');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Fuel type object has a cost property\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array');",
									"  responseData.forEach(function(vehicle) {",
									"    pm.expect(vehicle.fuelType.cost).to.exist;",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Verify non-negative integers for releaseYear, numberOfDoors, trunkCapacity, rentingCost, and id\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(vehicle) {",
									"        pm.expect(vehicle.releaseYear).to.be.a('number').and.to.be.at.least(0);",
									"        pm.expect(vehicle.numberOfDoors).to.be.a('number').and.to.be.at.least(0);",
									"        pm.expect(vehicle.trunkCapacity).to.be.a('number').and.to.be.at.least(0);",
									"        pm.expect(vehicle.rentingCost).to.be.a('number').and.to.be.at.least(0);",
									"        pm.expect(vehicle.id).to.be.a('number').and.to.be.at.least(0);",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Name, brandOwner, color, and state are non-empty strings\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    responseData.forEach(function(vehicle) {",
									"        pm.expect(vehicle.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"        pm.expect(vehicle.brandOwner).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Brand owner should not be empty\");",
									"        pm.expect(vehicle.color).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Color should not be empty\");",
									"        pm.expect(vehicle.state).to.be.a('string').and.to.have.lengthOf.at.least(1, \"State should not be empty\");",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/renting/list_bookings",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"renting",
								"list_bookings"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}